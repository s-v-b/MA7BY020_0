---
title: "Data visualization for OECD data"
categories: [Visualization, OECD, Grammar of Graphics, SDXM]
date: "`r Sys.time()`"

format:
  html:
    output-file: lab-oecd-vis.html
    execute:
      eval: false
      echo: fenced
  pdf:
    include-in-header:
      - text: "\\lhead{{\\sf  Analyse  données \\\\ TP Datavis}}"
    output-file: lab-oecd-vis.pdf



execute: 
  eval: false
  echo: fenced
  collapse: true
  
  
params:
  truc: html
  year: 2024 
  curriculum: "M1 MIDS & MFA"
  university: "Université Paris Cité"
  homepage: "https://stephane-v-boucheron.fr/courses/isidata"
  moodle: ""

engine: knitr
---


::: {layout="[80,20]"}

::: {#first-column}

{{< meta title >>}}

- **`r stringr::str_glue('{params$curriculum}')`**
- **`r stringr::str_glue('[{params$university}](https://www.u-paris.fr)')`**
- `r stringr::str_glue("Année {params$year}-{params$year+1}")`
- `r stringr::str_glue("[Course Homepage]({params$homepage})")`  
- `r stringr::str_glue("[Moodle]({params$moodle})")`

::: 

::: {#second-column}
![](/images/UniversiteParis_monogramme_couleur_RVB.png){align="right" style="size:50px;" width=75}
:::

:::

::: {.callout-important}

### Objectives

:::

## Setup

We will use the following packages. If needed, we install them.

```{r}
#| label: setup-packages
#| warning: false
#| message: false
#| 

stopifnot(
  require(tidyverse), 
  require(patchwork), 
  require(glue), 
  require(ggforce), 
  require(plotly),
  require(ggthemes),
  require(gapminder),
  require(ggrepel),
  require(OECD)
)

```

## Grammar of Graphics

We will use the *Grammar of Graphics* approach to visualization

The expression *Grammar of Graphics* was coined by [Leiland
Wilkinson](https://en.wikipedia.org/wiki/Leland_Wilkinson) to describe a
principled approach to visualization in Data Analysis (EDA)

A plot is organized around data (a table with rows (observations) and
columns (variables))

A *plot* is a *graphical object* that can be built *layer* by *layer*

Building a graphical object consists in *chaining* elementary operations

The acclaimed TED presentation by [Hans
Rosling](https://en.wikipedia.org/wiki/Hans_Rosling) illustrates the
Grammar of Graphics approach


::: {.content-visible when-format="html"} 


{{< video https://www.youtube.com/embed/jbkSRLYSojo >}}

:::

::: {.content-visible when-format="pdf"} 

Visit [https://www.youtube.com/embed/jbkSRLYSojo](https://www.youtube.com/embed/jbkSRLYSojo)

:::


We will produce the animated demonstration using

- `ggplot2`: an implementation of *grammar of graphics* in \`R
- `plotly`: a bridge between `R` and the javascript library `D3.js`
- Using `plotly`, opting for `html` ouput, brings the possibility of interactivity and animation
- Data gathered from [OECD](https:://data.oecd.org)

##  Search the OECD database in a principled way

```{r}
#| echo: true
#| eval: false
#| collapse: true
ds <- OECD::get_datasets()
OECD::search_dataset("REGION_DEMOGR", ds)
filter(ds, str_detect(str_to_lower(title), "demo"))
OECD::get_data_structure("REGION_DEMOGR")
```


```{r}
#| echo: true
#| eval: false
#| collapse: true
ds_qna <- OECD::get_dataset("QNA")
```
Mind reproducibility

## Have a look at downlaeded datasets

::: {.content-visible when-profile="solution"} 
::: {.callout-tip title="solution"} 

### Dataframes `REGION_DEMOGR_...`

```{r}
#| eval: false
#| results: markup
df <- readr::read_csv("../DATA/REGION_DEMOGR_12012024150444803.csv")

df %>%  
  glimpse()

df %>%
  filter(VAR == 'LIFE_EXP', TL==3, str_detect(REG_ID, 'FR')) %>%
  slice_sample(n=2, by=REG_ID) %>% 
  select(Year, REG_ID, Region, SEX, Value) %>% 
  glimpse()
```

### Dataframe `OECD.CFE.EDS,DSD_REG_DEMO@DF_LIFE_EXP...`

```{r}
#| eval: false
dt <- readr::read_csv("../DATA/OECD.CFE.EDS,DSD_REG_DEMO@DF_LIFE_EXP,1.0+all.csv")
```

```{r}
#| eval: false
dt %>% 
  glimpse()

dt <- dt %>% 
  filter(MEASURE == 'LFEXP',
         TERRITORIAL_LEVEL=="TL3") %>%
  slice_sample(n=2, by=COUNTRY) %>% 
  select(TIME_PERIOD, COUNTRY, REF_AREA, `Reference area`, SEX, OBS_VALUE) 
```


:::
:::


## GDP data

OECD offers different version of annula GDP data and components (income, expenditure, output, ...) in different currencies, with and without PPP.

```{r}
#| eval: false
df_gdp <- readr::read_csv('DATA/OECD.SDD.NAD,DSD_NAMAIN10@DF_TABLE1_EXPENDITURE_CPC,1.0+all.csv')
```

```{r}
#| eval: false
df_gdp %>% 
  glimpse()


df_gdp %>% 
  filter(UNIT_MEASURE=="USD_PPP", 
      SECTOR=="S13"      
  ) %>%
  select(TIME_PERIOD, REF_AREA, `Reference area`, OBS_VALUE) %>%
  glimpse() 
```

```{r}
#| eval: false
df_qdp <- readr::read_csv('DATA/OECD.SDD.NAD,DSD_NAMAIN1@DF_QNA_EXPENDITURE_CAPITA,1.0+all.csv')
```

```{r}
#| eval: false
df_qdp %>% 
  rename(gdp=OBS_VALUE,
         year=TIME_PERIOD) %>%
  glimpse()

unique(df_qdp$UNIT_MEASURE)
```

### Population data



::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}


```{r}
#| 

```

:::

:::


::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}



```{r}

```

:::

:::

## Join the data

Extract/filter a subset of rows using `dplyr::filter(...)`

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| eval: false
join_by()


df_qdp %>% 
  rename(gdp=OBS_VALUE,
         year=TIME_PERIOD) %>% 
  inner_join(
    dt,

  )
```




:::

:::


### Filtering (selection $σ$ from database theory) : Picking one year of data


There is simple way to filter  rows satisfying some condition. It consists 
in mimicking indexation in a matrix, leaving the colum index empty, replacing 
the row index by a condition statement (a logical expression) also called a mask.  

```{r}
#| label: gapminder_filtered
#| results: markup
#| eval: false
gapminder_2002 <- gapminder[gapminder$year==2002, ]
```

Have a look at `gapminder$year==2002`. What is the type/class of this expression?

This is possible in base `R` and very often convenient. 

Nevertheless, this way of performing row filtering does not emphasize the connection
between the dataframe  and the condition. Any logical vector with the right length could be used as a mask. Moreover, this way of performing filtering is not very functional.



::: {.callout-note collapse="true"}

In the parlance of Relational Algebra, `filter` performs a *selection*
of rows. Relational expression
$$σ_{\text{condition}}(\text{Table})$$ translates to

```{r}
#| label: filter-selection
#| eval: false
#| results: markup
filter(Table, condition)
```

where $\text{condition}$ is a boolean expression that can be evaluated
on each row of $\text{Table}$. In `SQL`, the relational expression would
translate into

```{verbatim}
SELECT *
FROM Table
WHERE condition
```

Check [Package `dplyr`
docs](https://www.rdocumentation.org/packages/dplyr/versions/0.7.8/topics/filter)

The `posit` cheatsheet on `dplyr` is an unvaluable resource for table manipulation.

:::

Use `dplyr::filter()` to perform row filtering

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| label: gapminder_filtered_dplyr
#| results: markup
#| 
#| eval: false

# filter(gapminder, year==2002)

gapminder %>% 
  filter(year==2002)
```

Note that in stating the condition, we simply write `year==2002` even though 
`year` is not the name of an object in our current session. This is possible because
`filter( )` uses *data masking*, `year` is meant to denote a column in `gapminder`.

The ability to use data masking is one of the great strengths of the `R` programming language.


:::

:::

## Static plotting: First attempt


-   Define a plot with respect to `gapminder_2002`

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}



```{r}
#| label: bad

#| eval: false
p <- gapminder_2002 %>%
  ggplot() 
```

:::

:::

::: {.callout-note collapse="true"}

You should define a `ggplot` object with data layer `gapminder_2022` and
call this object `p` for further reuse.

:::

-   Map variables `gdpPercap` and `lifeExp` to axes `x` and `y`

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}
```{r}
#| eval: false
#| label: båd-1stlayer
#| 
p <- p +
  aes(x=gdpPercap, y=lifeExp)
p 
```
:::
:::

::: {.callout-note collapse="true"}
Use `ggplot` object `p` and add a global aesthetic mapping `gdpPercap`
and `lifeExp` to axes `x` and `y` (using `+` from `ggplot2`) .
:::

-   For each row, draw a point at coordinates defined by the mapping

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| label: bad-2ndlayer
#| 
#| eval: false
p +
  geom_point()
```
:::
:::

::: {.callout-note collapse="true"}

You need to add a `geom_` layer to your `ggplot` object, in this case
`geom_point()` will do.

:::

We are building a graphical object (a `ggplot` object) around a data
frame (`gapminder`)

We supply *aesthetic mappings* (`aes()`) that can be either global or
bound to some *geometries* (`geom_point()`)or *statistics*

The global aesthetic mapping defines which columns are

-   mapped to which axes,
-   possibly mapped to colours, linetypes, shapes, ...

Geometries and Statistics describe the building blocks of graphics

### What's missing here?

when comparing to the Gapminder demonstration, we can spot that

-   colors are missing
-   bubble sizes are all the same. They should reflect the population
    size of the country
-   titles and legends are missing. This means the graphic object is
    useless.

We will add layers to the graphical object to complete the plot

## Second attempt: display more information

-   Map `continent` to color (use `aes()`)
-   Map `pop` to bubble size (use `aes()`)
-   Make point transparent by tuning `alpha` (inside `geom_point()`
    avoid *overplotting*)

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| label: better
#| eval: false

p <- p +
  aes(color=continent, size=pop) +
  geom_point(alpha=.5) 

p
```
:::
:::

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

In this enrichment of the graphical object, *guides* have been
automatically added for two aesthetics: `color` and `size`. Those two
guides are deemed necessary since the reader has no way to guess the
mapping from the five levels of `continent` to color (the color scale),
and the reader needs help to connect population size and bubble size.

`ggplot2` provides us with helpers to fine tune guides.

The scalings on the `x` and `y` axis do not deserve guides: the ticks
along the coordinate axes provide enough information.

:::
:::

## Scaling

In order to pay tribute to Hans Rosling, we need to take care of two
*scaling* issues:

-   the gdp per capita axis should be *logarithmic* `scale_x_log10()`
-   the *area* of the point should be proportional to the population
    `scale_size_area()`

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| label: better-with-scaling
#| eval: false

p <- p +
  scale_x_log10() +
  scale_size_area()

p
```

:::

:::


::: {.callout-caution collapse="true"}

Motivate the proposed scalings.

-   Why is it important to use logarithmic scaling for gdp per capita?
-   When is it important to use logarithmic scaling on some axis (in
    other contexts)?
-   Why is it important to specify `scale_size_area()` ?
:::

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| label: better-with-bad-scaling
#| eval: false

p +
  scale_radius()

```

:::
:::

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| label: better-with-bad-scaling-patchwork
#| eval: false

ptchwrk <- (p + ggtitle("scale_size_area")) + (p + scale_size() + ggtitle("scale")) 

ptchwrk + plot_annotation(
  title='Comparing scale_size_area and scale_size', 
  caption='In the current setting, scale_size_area() should be favored'
)
```

:::
:::


## In perspective

-   Add a plot title
-   Make axes titles
    -   explicit
    -   readable
-   Use `labs(...)`

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| label: title
#| eval: false
yoi <- 2002

p <-  p + 
  labs(
    title=glue('The world in year {yoi}'),
    x="Gross Domestic Product per capita (US$ 2009, corrected for PPP)",
    y="Life expectancy at birth"
  )

p
```

:::

:::

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

We should also fine tune the guides: replace `pop` by `Population` and
titlecase `continent`.

:::

:::

::: {.callout-note collapse="true"}

What should be the respective purposes of Title, Subtitle, Caption, ... ?

:::

## Theming using `ggthemes` (or not)

-   Theming

```{r}
#| label: theme_economist
#| eval: false
require("ggthemes")
```

::: {.callout-note collapse="true"}

Look at the online help on `pacman::p_load()`, how does
`pacman::p_load()` relate to `require()` and `library()`?
:::

A theme defines the *look and feel* of plots

Within a single document, we should use only one theme

See [Getting the
theme](https://ggplot2.tidyverse.org/reference/theme_get.html) for a
gallery of available themes

```{r}
#| lightbox: true
#| label: theme_economist-out
#| eval: false
p +
  theme_economist()
```

## Tuning scales

Use `scale_color_manual(...)` to hand-tune the color aesthetic mapping.

```{r}
#| label: theme_scale
#| echo: fenced
#| eval: false
neat_color_scale <-
      c("Africa" = "#01d4e5",
        "Americas" = "#7dea01" ,
        "Asia" = "#fc5173",
        "Europe" = "#fde803",
        "Oceania" = "#536227")
```

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| label: manual_color_scaling
#| eval: false
p <- p +
  scale_size_area(max_size = 15) + #<<
  scale_color_manual(values = neat_color_scale) #<<

p
```

:::

:::

::: {.callout-message collapse="true"}
Choosing a color scale is a difficult task

`viridis` is often a good pick.
:::

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}
Mimnimalist themes are often a good pick.

```{r}
#| label: full-monty
#| eval: false
p <- p +
   scale_size_area(max_size = 15,
                  labels= scales::label_number(scale=1/1e6,
                                               suffix=" M")) +
   scale_color_manual(values = neat_color_scale) +
   theme_minimal() +
    labs(title= glue("Gapminder  {min(gapminder$year)}-{max(gapminder$year)}"),
         x = "Yearly Income per Capita",
         y = "Life Expectancy",
       caption="From sick  and poor (bottom left) to healthy and rich (top right)")

p + theme(legend.position = "none") 
```

:::

:::

## Zooming on a continent

```{r}
#| eval: false
zoom_continent <- 'Europe'  # choose another continent at your convenience 
```

::: {.callout-tip collapse="true"}

Use `facet_zoom()` from package `ggforce`

:::

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| eval: false
#| label: zoom_continent

require("ggforce") #<<

p_zoom_continent <- p + 
  facet_zoom( #<<
    xy= continent==zoom_continent, #<<
    zoom.data= continent==zoom_continent #<<
    ) #<<

p_zoom_continent
```

:::

:::


## Adding labels

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}
```{r}
#| eval: false
#| warning: false
#| message: false
#| label: plot_gap_minder_2002_labelled
#| fig.cap:  Gapminder 2002 layer by layer

require(ggrepel) #<<
 
p +
   aes(label=country) + #<<
   ggrepel::geom_label_repel(max.overlaps = 5) + #<<
   scale_size_area(max_size = 15,
                  labels= scales::label_number(scale=1/1e6,
                                               suffix=" M")) +
   scale_color_manual(values = neat_color_scale) +
   theme_minimal() +
   theme(legend.position = "none") +
    labs(title= glue("Gapminder  {min(gapminder$year)}-{max(gapminder$year)}"),
         x = "Yearly Income per Capita",
         y = "Life Expectancy",
       caption="From sick  and poor (bottom left) to healthy and rich (top right)")
```

:::

:::

## Facetting

So far we have only presented one year of data (2002)

Rosling used an *animation* to display the flow of time

If we have to deliver a printable report, we cannot rely on animation,
but we can rely on *facetting*

Facets are collections of small plots constructed in the same way on
subsets of the data

We add a layer to the graphical object using `facet_wrap()`


::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| label: facet
#| eval: false

p <- p +
  aes(text=country) +
  guides(color = guide_legend(title = "Continent",
                              override.aes = list(size = 5),
                              order = 1),
         size = guide_legend(title = "Population",
                             order = 2)) +
  theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
  facet_wrap(vars(year), ncol=6) +
  ggtitle("Gapminder 1952-2007")

p
```

:::

:::


::: {.callout-message collapse="true"}
As all rows in `gapminder_2002` are all related to `year` 2002, we need
to rebuild the graphical object along the same lines (using the same
*graphical pipeline*) but starting from the whole `gapminder` dataset.

Should we do this using *cut and paste*?

No
:::

### Don't Repeat Yoursel (DRY)

> Abide to the DRY principle using operator `%+%`: the `ggplot2` object
> `p` can be fed with another dataframe and all you need is proper
> facetting.

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| label: dryit
#| eval: false

p %+% gapminder
```

:::

:::


## Animate for free with `plotly`

Use `plotly::ggplotly()`

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| label: animate
#| eval: false
#| echo: fenced
#| code-annotations: hover

#### #| eval: !expr knitr::is_html_output()



q <- filter(gapminder, FALSE) %>%
   ggplot() +
   aes(x = gdpPercap) +
   aes(y = lifeExp) +
   aes(size = pop) +
   aes(text = country) +                   #
   aes(fill = continent) +
   # aes(frame = year) +                     #
  geom_point(alpha=.5, colour='black') +
  scale_x_log10() +
  scale_size_area(max_size = 15,
                  labels= scales::label_number(scale=1/1e6,
                                               suffix=" M")) +
  scale_fill_manual(values = neat_color_scale) +
  theme(legend.position = "none") +
  labs(title= glue("Gapminder  {min(gapminder$year)}-{max(gapminder$year)}"),
       x = "Yearly Income per Capita",
       y = "Life Expectancy",
       caption="From sick  and poor (bottom left) to healthy and rich (top right)")


(q %+% gapminder) %>%
  plotly::ggplotly(height = 500, width=750)   
```
1. `text` will be used while *hovering*
2. `frame` is used by `plotly` to drive the animation. One `frame` per year

:::

:::

::: {.content-visible when-profile="solution"} 

::: {.callout-tip title="solution"}

```{r}
#| echo: fenced 
#| eval: false

#####| eval: !expr knitr::is_html_output()


(p %+% gapminder +
 facet_null() +
  theme_minimal() +
 aes(frame=year)) %>%
 plotly::ggplotly(height = 500, width=750)

```

:::

:::


