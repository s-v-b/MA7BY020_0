---
title: 'Univariate analysis I'
categories: [Univariate analysis, Numerical data, Boxplots, ECDF, Histograms, Quantiles, GSS]
date: "`r Sys.time()`"


execute:
  echo: true
  eval: true
  collapse: true


format:
  html:
    output-file: lab-univariate-numeric.html
  pdf:
    output-file: lab-univariate-numeric.pdf

params:
  truc: html
  year: 2024 
  curriculum: "M1 MIDS & MFA"
  university: "Université Paris Cité"
  homepage: "https://s-v-b.github.io/MA7BY020"
  moodle: "https://moodle.u-paris.fr/course/view.php?id=6143"
---




{{< include _preamble.qmd >}}


::: {.callout-important title="Objectives"}

In Exploratory Data Analysis of tabular data, univariate analysis is the first step. It consists in exploring, summarizing, visualizing columns of a dataset. In this workbook we focus on univariate numerical samples. We explore techniques for: 

- Summarizing univariate numerical samples
- Displaying numerical samples

This is also an opportunity to:

- Introduce to the [General Social Survey](https://gss.norc.org)
- Use packages `gssr` and `gssrdoc`

:::

## Setup

If the required packages have not (yet) been installed, install them. 

```{r setup-packages}
#| warning: false
#| message: false
#| collapse: true

stopifnot(
  require(skimr),   # Univariate summaries from the shelf
  require(lobstr),  # R introspection
  require(rlang),   # R introspection
  require(glue),    # Like formatted strings
  require(gssr),
  require(gssrdoc),
  require(fs),      # File manipulation
  require(patchwork), # piecing ggplots together
  require(tidyverse) # What else?
)
```




# General Social Survey (GSS) dataset



::: {.callout-note}

### Question

Load the cumulative GSS dataset (`gss_all`). Have a glimpse at the resulting dataframe. Load `gss_dict`.

:::

::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip}

### Solution

```{r}
#| eval: false
ls()

data(gss_all)   # Takes time

ls()

gss_all |> glimpse()
```

::: 

:::

::: {.callout-note}

### Question

- In dataset `gss_all`, what do the rows stand for? 
- In dataset `gss_all`  what do columns `year`  and `id` stand for? 
- For a given value of `id`, can you find several rows ?
- For a given value of `year`, can you find several rows with the same `id`?
- How many distinct values of `year` can you find in `gss_data`?
- For each value of `year`, how many people were surveyed?
- Why is this dataset called *cumulative*?

:::

::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip}

### Solution

In `gss_all`, rows stand for observation units: each row matches one respondent for a given year. 

```{r}
#| eval: false
gss_all |> 
#  select(year, id) |> 
  count(year, by=id) |>
  filter(n>1)
```

Distinct rows have distinct values in column `id`. Column `id` may server as an identifier/key for this table.  

```{r}
#| eval: false
p <- gss_all |>
  count(by=year) |>
  ggplot() +
    aes(x=by, y=n) +
    geom_col() 


p + labs(
      title="Number of respondents for GSS"
    ) +
    xlab("Year")

```

```{r}
# gss_which_years(gss_all, fefam)
```

::: 

:::



::: {.callout-note}

### Question


:::

::: {.content-visible when-profile="solution"}

::::: {.callout-note title="Solution" collapse="true"}

```{r}
#| mesage: false
#| collapse: true


```

:::::

:::

# Table exploration

Load `gss_sub` which is much smaller than `gss_all`. Have a glimpse. 

::: {.callout-note title="Question"}

- How many variables can you find in `gss_sub`?
- How many distinc values for each column? 
- Which columns should be considered as categorical/factor?
 
:::

::: {.content-visible when-profile="solution" collapse="true"}

::: {.callout-tip title="Solution"}

Deciding which variables are categorical sometimes requires judgement. 

```{r}
data(gss_sub)
```

```{r}
gss_sub |>
  glimpse()

gss_sub |>
  select(-id, -year) |>
  summarize(across(everything(), n_distinct)) |>
  pivot_longer(cols=everything(), values_to="n") |>
  arrange(desc(n))
```

Columns  `wtssps`, `vpsu`, `vstrat`, `sampcode`, `wtssall`,  `formwt`, and `sample` seem to serve some methodological purpose. Just as `id` or `year`, they do not convey information about a responden demography or attitude but contain information  about the data gathering process. According to [gssr package overview](https://kjhealy.github.io/gssr/articles/overview.html), these variables are necessary for the survey weighting.  

```{r}
wt_vars <- c("vpsu",      #  variance primary sampling unit
             "vstrat",    #  variance strata
             "oversamp",  # 
             "formwt",              # weight to deal with experimental randomization
             "wtssps",              # weight variable
             "sampcode",            # sampling error code
             "sample")              # sampling frame and method
```


```{r}
n_per_col <- gss_sub |>
  select(-id, -year, -all_of(wt_vars)) |>
  summarize(across(everything(), n_distinct)) |>
  pivot_longer(cols=everything(), values_to="n") |>
  arrange(desc(n))

n_per_col 
```

{{< fa hand-point-right >}} `age` may be considered as a numerical column, whereas colums 
`relig`, `polviews`, `degree`, `padeg`, `madeg`, `ballot`, `fefam`,`race`, `sex` can be viewed as categorical.

:::

:::

::: {.callout-warning title="Caveat"}

In the sequel, we explore the `age` distribution as is the `age` column was a genuine univariate sample. This is done for teaching purpose. The `age` column is not collected by repeatedy picking individuals uniformly at random from a fixed population. 

Indeed the `age` column is a union of samples collected every year or every two years since 1972. The American population has changed thoughout the five decades.

Moreover,  yearly samples are not i.i.d. samples from the whole population. The sampling methods have varied over time. Sampling methods rely on multistage stratified sampling and quotas. 

:::

# Exploring `age` column 


::: {.callout-note title="Question"}

For column `age`, disregarding any weighting process

- compute the summary. 
- compute the range, the IQR, the standard deviation
- compute the Mean Absolute Deviation, the Median Absolute Deviation


:::

::: {.content-visible when-profile="solution"}

::::: {.callout-note title="solution" collapse="true"}

```{r}
col <- gss_sub |>
  pull(age) 
  
col |>
  summary()
```

```{r}
fns <- c(
  med=\(x) median(x, na.rm=T), 
  iqr=\(x) IQR(x,  na.rm=T),
  mad=\(x) mean( abs(x-median(x, na.rm=T)), na.rm=T),
  mad2=\(x) median( abs(x-median(x, na.rm=T)), na.rm=T),
  sd=\(x) sd(x, na.rm=T)
)

gss_sub |>
  summarize(across(age, fns))
```


```{r}
gss_sub |>
  skimr::skim(age)
```
:::::

:::

::: {.callout-tip}

Filter out rows with missing data in columns `age` or `sex`

```{r}
gss_fil <- gss_sub |>
  filter(!is.na(age), !is.na(sex))
```
:::

## Boxplots


::: {.callout-note title="Question"}

- Build a boxplot for `age`.
- Equip the plot with a title, a subtitle, a caption
- Annotate the boxplot with summary statistics.

:::


::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip title="Solution"}

```{r}
p_box <- gss_fil |>
  ggplot() +
  aes(y=age) +
  geom_boxplot()

p_box +
  labs(
    title="Boxplot of age distribution",
    subtitle="gss cumulative data",
    caption=glue(
      "Sample size {length(gss_sub)}, {sum(is.na(col))} NAs"
    )
  )
```

::: 
 
:::

::: {.callout-note title="Question"}

- Build a boxplot of `age` distribution according to `sex`.
- What is the impact of argument `varwidth=T`?
- What is the impact of argument `notch=T`? 
- What is the difference between `stat_boxplot()` and `geom_boxplot()`?
- How would you get rid of the useless ticks on the x-axis? 

:::

::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip title="Solution"}


```{r}
gss_fil |>
  ggplot() +
  aes(x=as_factor(sex), y=age) +
  geom_boxplot(varwidth=T, notch=T) +
  labs(
    title="Boxplot of age distribution with respect to sex",
    subtitle="gss cumulative data",
    caption=glue(
      "Sample size {nrow(.data)}, NAs removed"
    )
  )
```

::: 
:::

## Histograms


::: {.callout-note title="Question"}

- Plot a histogram of the `age` distribution
- Facet by `sex`
- Draw the `age` distribution histograms for each sex on the same plot
- Facet by `sex` and `year`
- Build an animated histogram plot where `frame` is determined by `year` 

:::

::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip title="Solution"}

```{r}
n_bins <- 10

p_h <- gss_fil |>
  ggplot() +
  aes(x=age)

p_10 <- p_h +
  geom_histogram(
    bins= n_bins,
    fill="white",
    color="black"
  ) 

n_bins <- 20

p_20 <- p_h + 
   geom_histogram(
    bins= n_bins,
    fill="white",
    color="black"
  )  

p_10 + p_20
```

::: 
 
:::




Histograms are used to sketch possibly (absolutely) continuous distributions
by using piecewise constant approximations of density functions. Histograms 
can also be viewed as column plots for binned data (that is discretizations
of "continuous" data).  


::: {.callout-note title="Question"}

- Define *breaks* for `age` data 
  - regular breaks with age ranges of length 5
  - irregular breaks `[18-25[`, `[25, 35[`, `[35,50[`, `[50, 65[`, `[65,+∞[`
- Bin `age` according to defined breaks using `cut()`
- Plot the binned data using `geom_bar()` or `geom_col()` 

:::

::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip title="Solution"}

```{r}

```


:::


:::


Demographers use *population pyramids* to sketch the age distribution in a population. 
Population pyramids are special facetted histograms or barplots. 

::: {.callout-note title="Question"}

- Plot an age-sex pyramid for the `gss` sample. 
- Animate with respect to `year`

:::


::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip title="Solution"}

- [r-bloggers](https://www.r-bloggers.com/2023/09/creating-population-pyramid-plots-in-r-with-ggplot2/)
- [Stackoverflow](https://stackoverflow.com/questions/14680075/simpler-population-pyramid-in-ggplot2)
- [R for the rest of us](https://rfortherestofus.com/2024/07/population-pyramid-part-2)

:::
 
:::

## Density plots


Histograms deliver piecewise constant estimations/approximations of a population density. 
If we suspect the population density to be *smooth*, it is sensible to try to build 
smooth estimates/aproximations of the population density. This is the purpose of density estimates. 


::: {.callout-note  title="Question"}

- Draw density plots for age distribution
- Use different bandwidths
- Use different kernels
- Facet by `sex`
- Facet by `sex` and `year`
- Overlay histograms and density plots (in `geom_histogram()` use `aes(y=after_stat(density))`)

:::

::: {.callout-tip}

Use `stat_density()`

:::

::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip title="Solution"}


```{r}
p_h +
  stat_density(
              fill="white",
              color="black") +
  geom_histogram(
    aes(y=after_stat(density)
    ),
     bins=15,
     fill="white",
     color="black",
     alpha=.5) +
  labs(
    caption = "Overlayed Density Estimates"
  )
```
::: 
 
:::


::: {.callout-note title="Question"}

Build violine plots for `age` distribution (use `geom_violine()`).

:::


::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip tip="Solution"}

```{r}
gss_fil |>
  filter (as.integer(year) %% 8L ==0L) |>
  ggplot() +
  aes(x=as_factor(year),y=age) +
  geom_violin() +
  facet_wrap(~ sex)
```

::: 

:::

## Cumulative Distribution Functions

Not all probability distributions have densities, but all are characterized by their Cumulative Distribution Functions (CDFs). Each sample defines an Empirical Cumulative Distribution Function (ECDF). 

::: {.callout-note title="Question"}

- Plot the `age` ECDF using `stat_ecdf()`
- Facet by `sex`, then by `year` and `sex`
- Use base `R` `ecdf()` and `stat_function()` to draw the same plot.

:::

::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip title="Solution"}

:::
 
:::

::: {.callout-note}

### Question {{< fa mug-hot >}}

- Compare the `age` distributions for women and men using the Kolmogorov-Smirnov statistic (`ks.test()`)
- How is the Kolmogorov-Smirnov statistic computed?

:::

::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip title="Solution"}

:::
 
:::

## Quantile plots

The *quantile function* of a probability distribution is the (generalized, left-continuous) inverse of its CDF. Quantile functions are useful devices in EDA and random generation.

::: {.callout-note title="Question"}

- Plot the quantile function of the `age` empirical distribution
- Plot the quantile functions of the `age` empirical distributions for men and women
- Design  a function that takes as input a univariate numerical sample and returns the quantile function (in the same way as `ecdf()` does)

:::


::: {.content-visible when-profile='solution'} 

::: {.callout-tip title="Solution"}

:::
 
:::

::: {.callout-note title="Question"}

- Draw a quantile-quantile plot to compare `age` distribution for women and men with base `R` `qqplot()`
- {{< fa mug-hot >}} Draw a quantile-quantile plot to compare `age` distribution for women and men using `ggplot2`.

:::


# How could you comply with the DRY principle ?

::: {.content-visible when-profile="solution" collapse="true"}

::::: {.callout-note title="solution" collapse="true"}

This amounts to [programming with `ggplot2`](https://ggplot2-book.org/programming) function. This is not straightforward since `ggplot2` relies on data masking. 

> A major requirement of a good data analysis is flexibility. If your data changes, or you discover something that makes you rethink your basic assumptions, you need to be able to easily change many plots at once. The main inhibitor of flexibility is code duplication. If you have the same plotting statement repeated over and over again, you’ll have to make the same change in many different places. Often just the thought of making all those changes is exhausting! This chapter will help you overcome that problem by showing you how to program with ggplot2.

> To make your code more flexible, you need to reduce duplicated code by writing functions. When you notice you’re doing the same thing over and over again, think about how you might generalise it and turn it into a function. If you’re not that familiar with how functions work in R, you might want to brush up your knowledge at https://adv-r.hadley.nz/functions.html. 

From [Hadley Wickham](https://ggplot2-book.org/programming)

An attempt: 

```{r}
#| file: "../_UTILS/make_biotiful.R"
#| echo: true
#| eval: true

```


```{r}
mp <- gss_fil |> 
  make_biotifoul(is.numeric) + 
  theme_minimal()

mp
```

Another attempt

```{r}
#| file: "../_UTILS/my_histo.R"
#| echo: true
#| eval: true
```


```{r}
list_plots <- gss_fil |> 
  select(where(is.numeric)) |> 
  colnames() |> 
  map(rlang::parse_expr) |>
  map (\(x) my_histo(gss_fil, {{x}}))

patchwork::wrap_plots(list_plots)
```
:::::

:::

# Lazy loading  and labelled format

::: {.callout-note}

### Question 

- What is `R` *lazy loading*? 
- What is the *labelled format* used the GSS data?

:::

::: {.content-visible when-profile='solution'} 
 
::: {.callout-tip title="Solution"}

To understand the *labelled format*, recall that the tibble columns are vectors. Vectors may be endowed with attributes (just like factors are integer vectors with a `levels` atribute). We may examine attributes of a given column, using `attributes()`. Consider for example column `fefam`.

```{r}
col_fefam <- gss_sub |>
  pull(fefam) 
  
col_fefam |>
  attributes()
```

Attribute `label` point to the question. Do ou agree with the foloowing statement *better for man to work, woman tend home*?

Attribute `class` tell us that the vector basetype is numeric (`double`), that the vector use methods for S3 generic functions for class `vctrs_vctr` (see vctrs` package), and S3  generic functions for class `haven_labelled`.

Attribute `labels` contain levels encoded by the numeric values.
The first 5 labels represent a Likert scale ranging from `strongly agree` to `strongly disagree`, with a `don't know` response. Other labels 

```{r}
col_fefam[!is.na(as.numeric(col_fefam))][1:10] |>
  as.numeric() 
```

Have a look at the 12 labels that denote missing data.

```{r}
attr(col_fefam, "labels") |> 
  names()
```

- What does `not imputatble` mean?
- Is there a difference between `don't know` and `no answer`?
- What happens if you coerce column `fefam` using `as_factor`?


::: 


:::


# References 

- [rmarkdown](bookdown.org/yihui/rmarkdown)
- [dplyr](https://gplot2.tidyverse.org)
- [ggplot2](https://ggplot2.tidyverse.org)
- *R Graphic Cookbook*. Winston Chang. O' Reilly.
- [A blog on ggplot object](https://www.data-imaginist.com/2017/Beneath-the-canvas/)
- [Package `skimr`](https://github.com/ropensci/skimr)
- [Package `gssr`]()
- [Package `gssrdoc`]()
- [General Social Survey](https://gss.norc.org)
- [Data gathering and processing from Statistics Canada](https://www150.statcan.gc.ca/n1/edu/power-pouvoir/ch15/5200003-eng.htm)
