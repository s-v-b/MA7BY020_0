---
title: "R programming: vectorization"
date: "`r Sys.time()`"
categories: [R programming, vectorization, functional programming]

execute:
  echo: true
  eval: true
  collapse: false


format:
  html:
    output-file: lab-vectorization.html
    code-fold: false
  pdf:
    output-file: lab-vectorization.pdf

params:
  truc: html
  year: 2024 
  curriculum: "M1 MIDS"
  university: "Université Paris Cité"
  homepage: "https://s-v-b.github.io/MA7BY020"
  moodle: "https://moodle.u-paris.fr/course/view.php?id=6143"
  
engine: knitr
---


```{r}
#| include: false
#| message: false
#| warning: false
stopifnot(
  require(here),
  require(patchwork),
  require(glue),
  require(tidyverse),
  require(vctrs),   # S3 vectors
  require(lobstr),  # Object size and addresses
  require(rlang),   # types ...
  require(sloop),  # Explore objects
  require(lubridate)  # Dates and Datetimes
)

old_theme <- theme_set(theme_minimal())  # ggplot2
```

::: {layout="[80,20]"}

::: {#first-column}



- **`r stringr::str_glue('{params$curriculum}')`**
- **`r stringr::str_glue('[{params$university}](https://www.u-paris.fr)')`**
- `r stringr::str_glue("Année {params$year}-{params$year+1}")`
- `r stringr::str_glue("[Course Homepage]({params$homepage})")`  
- `r stringr::str_glue("[Moodle]({params$moodle})")`

::: 

::: {#second-column}
![](/images/UniversiteParis_monogramme_couleur_RVB.png){align="right" style="size:50px;" width=75}
:::

:::

[Vectors in R](https://adv-r.hadley.nz/vectors-chap.html)

[`vctrs` package](https://vctrs.r-lib.org)


::: {.callout-warning}

### Objectives 


:::


# Vectorization

In pseudo code, we meet different uses of `for` loops. A specially
interesting setting consists of `for` loops with a simple *body* and where we know that the loop iterates over all items in `collection` (there is no hidden `break` inside the body)

```{#lst-simple-loop .r lst-cap="A very simple for loop"}
for (identifier in collection) {
  # something simple 
}
```

A body is considered *simple* if each item in `collection` is processed independently of all other items in the `collection`. 
This entails that items may be processed in any order. 

Such simple loops can be *vectorized* using functional programming tools such as those provided by package [`purrr`](https://purrr.tidyverse.org). `purrr::map_xxx()` or base `R` functions like `apply`, `lapply`, `sapply`. 

```{.r}
map_xxx(collection, # something simple)
```

where `xxx` indicates the type of collection that is used to collect the result. This streamlines the task of the interpreter and this helps the reader. 


::: {.callout-note}

Functional programming tools are both powerful and expressive. If we use them instead of plain `for` loops, we tell the reader that 
iteration is simple.

:::

# Examples of vectorized functions

## Most mathematical functions 

::: {.callout-note}


### Question

What is the type of the input? of the output?

```{.r}
x <- c(6:-4)
sqrt(x)  
```


```{.r}
log(x)
```

:::

# Vectorized choice if `ifelse()`

[`ifelse(test, yes, no)`](https://rdrr.io/r/base/ifelse.html)

::: {.callout-note}

### Question

Compare the outputs of 

```{.r}
sqrt(ifelse(x >= 0, x, NA))  
```

```{.r}
ifelse(x >= 0, sqrt(x), NA)
```

Explain differences if any.

:::



::: {.callout-note}

### Question

Consider the vector of base class `Date`

```{.r}
x <- seq(
  as.Date("2000-02-29"), 
  as.Date("2004-10-04"), 
  by = "1 month"
)
```
Which items are not the `29th` day of a (Gregorian) calendar month?

We attempt to turn those items into `NA`
```{.r}
y <- ifelse(as.POSIXlt(x)$mday == 29, x, NA)
```

Check the result. Explain. Fix.

:::

::: {.content-visible when-profile='solution'} 
 
::: {.callout-note}

### Solution

```{.r}
class(y) != class(x)
class(y)
```

```{.r}
class(y) <- class(x)
```
or

```{.r}
y <- lubridate::as_date(y)
```
 
or even better

```{.r}
y <- x
y[lubridate::mday(x)!=29] <- NA 
```


:::


:::

::: {.callout-note}

### Question 

What happens if argument `test` is shorter that arguments `yes`  and `no`? 
:::

::: {.callout-note}

### Question

What happens if some entry in argument `test` is `NA`?

:::
